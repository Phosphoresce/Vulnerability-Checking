#!/bin/bash
case "$1" in
	# return version of openssl
	v)	echo -e '\n'; openssl version -a
		echo ''
		;;
	# test for ssl heartbeat by connecting to a server and reading debug information using the built in openssl functionality
	c)	echo -e '\nStatus: '; openssl s_client -connect $2:$3 -tlsextdebug 2>&1| grep 'server extension "heartbeat" (id=15)' || echo "Most likely safe."
		echo ''
		;;
	# utilizes a python script that was mostly borrowed from other open source projects on github. This option was included because using the functionality provided by the openssl library turned out to be extremely slow.
	cl)	python ssltest.py top-1m.csv $2
		;;
	# duh. <linux version detection here>
	p)	apt-get install openssl
		;;
	# Use this if you need to recompile a specific dependent version without the vulnerable extension
	r)	wget "https://www.openssl.org/source/openssl-1.0.1j.tar.gz"; tar xzf openssl-1.0.1j.tar.gz; cd openssl-1.0.1j; ./config -DOPENSSL_NO_HEARTBEATS; make depend; make all
		;;
	# A secondary shell script that was exported for the sake of cleanliness and readability in this master script
	b)	./bashcheck
		;;
	# duh <linux version detection here>
	bp)	apt-get install bash
		;;
	# if no options are specified the usage options will be printed
	*)	echo "Usage: [options: v c cl p r b][aux options]"
		echo "v - returns version information"
		echo "c - tests remote/local for heartbleed extension"
		echo "    opts:[host] [port]"
		echo "cl- batch testing of remote hosts"
		echo "	  opts:$number of hosts to test"
		echo "p - uses your package manager to update openssl"
		echo "r - compiles specified version with -DOPENSSL_NO_HEARTBEATS"
		echo "	  opts:[version]"
		echo "b - tests for shellshock vulnerability"
		;;
esac
